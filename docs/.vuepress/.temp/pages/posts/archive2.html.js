import comp from "C:/Users/86189/Downloads/vuepress-starter/docs/.vuepress/.temp/pages/posts/archive2.html.vue"
const data = JSON.parse("{\"path\":\"/posts/archive2.html\",\"title\":\"日志处理\",\"lang\":\"en-US\",\"frontmatter\":{\"title\":\"日志处理\",\"date\":\"2024-04-10T00:00:00.000Z\",\"category\":[\"处理\"],\"tag\":[\"处理\"],\"archive\":true},\"headers\":[],\"git\":{},\"filePathRelative\":\"posts/archive2.md\",\"excerpt\":\"<div class=\\\"language-php\\\" data-ext=\\\"php\\\" data-title=\\\"php\\\"><pre class=\\\"language-php\\\"><code>在 config 目录下的 log<span class=\\\"token operator\\\">.</span>php 配置文件，用于设置日志信息；\\n系统提供了不同日志级别，默认 info 级别，从低到高排列如下：\\ndebug<span class=\\\"token operator\\\">/</span>info<span class=\\\"token operator\\\">/</span>notice<span class=\\\"token operator\\\">/</span>warning<span class=\\\"token operator\\\">/</span>error<span class=\\\"token operator\\\">/</span>critical<span class=\\\"token operator\\\">/</span>alert<span class=\\\"token operator\\\">/</span>emergency<span class=\\\"token operator\\\">/</span>sql；\\n使用 <span class=\\\"token function\\\">record</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>方法，记录一条测试日志；\\n<span class=\\\"token class-name static-context\\\">Log</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">record</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string single-quoted-string\\\">'测试日志！'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">record</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>方法不是实时记录，需要等待程序完毕后决定是否写入日志；\\n如果在写入方法后添加 <span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>关闭写入，那么 <span class=\\\"token function\\\">record</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>方法则不写入；\\n<span class=\\\"token class-name static-context\\\">Log</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n系统还提供了一个 <span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>方法，进行时时写入，不理会其它限制；\\n<span class=\\\"token class-name static-context\\\">Log</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string single-quoted-string\\\">'测试日志信息'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string single-quoted-string\\\">'error'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n 系统发生异常后，会自动写入 error 日志，如果你想手动也可以；\\n<span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">echo</span> <span class=\\\"token number\\\">0</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">ErrorException</span> <span class=\\\"token variable\\\">$e</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">echo</span> <span class=\\\"token string single-quoted-string\\\">'发生错误：'</span><span class=\\\"token operator\\\">.</span><span class=\\\"token variable\\\">$e</span><span class=\\\"token operator\\\">-&gt;</span><span class=\\\"token function\\\">getMessage</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name static-context\\\">Log</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">record</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string single-quoted-string\\\">'被除数不得为零'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string single-quoted-string\\\">'error'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\"}")
export { comp, data }
