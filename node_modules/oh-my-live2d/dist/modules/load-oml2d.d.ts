import { CommonStyleType } from '../types/common.js';
import type { EventFn, LoadEventFn } from '../types/events.js';
import { DefaultOptions } from '../types/index.js';
import { ModelOptions, Options } from '../types/options.js';
export declare class LoadOhMyLive2D {
    options: DefaultOptions;
    private events;
    private oml2d?;
    constructor(options: Options);
    /**
     * 安装组件
     */
    private setup;
    /**
     * 当前模型索引值
     */
    get modelIndex(): number | undefined;
    /**
     * 当前模型选项
     */
    get model(): ModelOptions | undefined;
    /**
     * 主动提示消息, 调用时会提前自动关闭当前空闲消息播放器, 调用结束之后会自动开启空闲消息播放器
     * @param message 提示信息
     * @param duration 持续时间  默认值: 3000
     * @param priority  优先级 默认值: 3
     */
    tipsMessage(message: string, duration?: number, priority?: number): void;
    /**
     * 加载下一个模型
     */
    loadNextModel(): Promise<void>;
    /**
     * 重新加载当前模型
     */
    reloadModel(): Promise<void>;
    /**
     * 舞台滑入
     */
    stageSlideIn(): Promise<void>;
    /**
     * 舞台滑出
     */
    stageSlideOut(): Promise<void>;
    /**
     * 设置当前模型的舞台样式
     * @param size
     */
    setStageStyle(style: CommonStyleType): void;
    /**
     * 清除当前提示框内容并关闭空闲消息播放器
     */
    clearTips(): void;
    /**
     * 停止空闲消息播放器
     */
    stopTipsIdle(): void;
    /**
     * 开启空闲消息播放器
     */
    startTipsIdle(): void;
    /**
     * 弹出状态条并保持打开状态
     * @param content
     * @param color
     */
    statusBarOpen(content?: string, color?: string): void;
    /**
     * 收起状态条
     * @param content
     * @param color
     * @param delay
     */
    statusBarClose(content?: string, color?: string, delay?: number): void;
    /**
     * 弹出状态条, 一段时间后自动收起
     * @param content
     * @param delay
     * @param color
     */
    statusBarPopup(content?: string, delay?: number, color?: string): void;
    /**
     * 清除状态条所有绑定事件
     */
    statusBarClearEvents(): void;
    /**
     * 设置状态条点击事件
     * @param fn
     */
    setStatusBarClickEvent(fn: EventFn): void;
    /**
     * 设置状态条hover事件
     * @param events
     */
    setStatusBarHoverEvent(events?: {
        onIn?: EventFn;
        onOut?: EventFn;
    }): void;
    /**
     * 设置当前模型位置
     * @param x
     * @param y
     */
    setModelPosition(position: {
        x?: number;
        y?: number;
    }): void;
    /**
     * 设置当前模型的旋转角度
     * @param rotation
     */
    setModelRotation(rotation: number): void;
    /**
     * 设置当前模型的锚点位置
     * @param anchor
     */
    setModelAnchor(anchor: {
        x?: number;
        y?: number;
    }): void;
    /**
     * 设置当前模型缩放
     * @param value
     */
    setModelScale(value: number): void;
    /**
     * 显示当前模型点击区域框
     */
    showModelHitAreaFrames(): void;
    /**
     * 隐藏当前模型点击区域框
     */
    hideModelHitAreaFrames(): void;
    /**
     * 模型在每次加载状态发生变化时的事件监听
     * @param fn
     */
    onLoad(fn: LoadEventFn): void;
    /**
     * 舞台滑入动画执行完毕后的事件监听
     * @param fn
     */
    onStageSlideIn(fn: EventFn): void;
    /**
     * 舞台滑出动画执行完毕后的事件监听
     * @param fn
     */
    onStageSlideOut(fn: EventFn): void;
}
